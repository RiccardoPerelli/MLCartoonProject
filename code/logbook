test 1:

latent_dim = 1024
img_height = img_width = 64
batch_size = 32
epochs = 15

Encoder:
layers.Input(shape=(img_height, img_width, 3)),
layers.Conv2D(8, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(16, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Flatten(),
layers.Dense(latent_dim, activation='relu')

Decoder:
layers.Reshape((32, 32, 1)),
layers.BatchNormalization(),
layers.Conv2DTranspose(16, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(8, kernel_size=3, strides=(1, 1), activation='relu', padding='same'),
layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')

Voto: 4

test 2

latent_dim = 2500
img_height = img_width = 200
batch_size = 32
epochs = 15

layers.Input(shape=(img_height, img_width, 3)),
layers.Conv2D(8, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(16, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Flatten(),
layers.Dense(latent_dim, activation='relu'),])

layers.Reshape((50, 50, 1)),
layers.BatchNormalization(),
layers.Conv2DTranspose(16, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(8, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')

Voto: 5.5

test 3

latent_dim = 1024
img_height = img_width = 128
batch_size = 64
epochs = 15

layers.Input(shape=(img_height, img_width, 3)),
layers.Conv2D(16, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(32, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(64, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Flatten(),
layers.Dense(latent_dim, activation='relu'),])

layers.Reshape((32, 32, 1)),
layers.BatchNormalization(),
layers.Conv2DTranspose(64, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(32, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(16, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')

Voto: 4.5

test 4

latent_dim = 256
img_height = img_width = 128
batch_size = 64
epochs = 15

layers.Input(shape=(img_height, img_width, 3)),
layers.Conv2D(16, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(32, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(64, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Flatten(),
layers.Dense(latent_dim, activation='relu'),])

layers.Reshape((16, 16, 1)),
layers.BatchNormalization(),
layers.Conv2DTranspose(64, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(32, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(16, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')

Voto: 2

test 5

latent_dim = 2116
img_height = img_width = 184
batch_size = 64
epochs = 15

layers.Input(shape=(img_height, img_width, 3)),
layers.Conv2D(32, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(64, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Flatten(),
layers.Dense(latent_dim, activation='relu'),])

layers.Reshape((46, 46, 1)),
layers.BatchNormalization(),
layers.Conv2DTranspose(64, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(32, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')

Voto: 2

test 6

latent_dim = 2500
img_height = img_width = 200
batch_size = 32
epochs = 15

layers.Input(shape=(img_height, img_width, 3)),
layers.Conv2D(8, (3, 3), activation='relu', padding='same', strides=(1, 1)),
layers.Conv2D(16, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(32, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Flatten(),
layers.Dense(latent_dim, activation='relu'),])

layers.Reshape((50, 50, 1)),
layers.BatchNormalization(),
layers.Conv2DTranspose(32, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(16, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(8, kernel_size=3, strides=(1, 1), activation='relu', padding='same'),
layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')

Voto: 5.5

test 7

latent_dim = 2048
img_height = img_width = 128
batch_size = 32
epochs = 15

layers.Input(shape=(img_height, img_width, 3)),
layers.Conv2D(8, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(16, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(32, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(32, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Flatten(),
layers.Dense(latent_dim, activation='relu'),])

layers.Reshape((8, 8, 32)),
layers.BatchNormalization(),
layers.Conv2DTranspose(32, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(32, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(16, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(8, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')

Voto: 5.5

test 8

latent_dim = 20000
img_height = img_width = 200
batch_size = 32
epochs = 15

layers.Input(shape=(img_height, img_width, 3)),
layers.Conv2D(8, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(16, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(32, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(32, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Flatten(),
layers.Dense(latent_dim, activation='relu'),])

layers.Reshape((25, 25, 32)),
layers.BatchNormalization(),
layers.Conv2DTranspose(32, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(32, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(16, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(8, kernel_size=3, strides=(1, 1), activation='relu', padding='same'),
layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')

Voto: 6.5

test 9

latent_dim = 8192
img_height = img_width = 128
batch_size = 32
epochs = 15

layers.Input(shape=(img_height, img_width, 3)),
layers.Conv2D(16, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(32, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(64, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(128, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Flatten(),
layers.Dense(latent_dim, activation='relu'),])

layers.Reshape((8, 8, 128)),
layers.BatchNormalization(),
layers.Conv2DTranspose(128, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(64, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(32, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(16, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')

Voto: 7

test 10

latent_dim = 4096
img_height = img_width = 128
batch_size = 32
epochs = 15

layers.Input(shape=(img_height, img_width, 3)),
layers.Conv2D(8, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(16, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(32, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(128, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Conv2D(256, (3, 3), activation='relu', padding='same', strides=(2, 2)),
layers.Flatten(),
layers.Dense(latent_dim, activation='relu'),])

layers.Reshape((4, 4, 256)),
layers.BatchNormalization(),
layers.Conv2DTranspose(256, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(128, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(32, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(16, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2DTranspose(8, kernel_size=3, strides=(2, 2), activation='relu', padding='same'),
layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')

Voto: 6